<script>
    import Anchor from '$components/Anchor.svelte'
</script>


# DataHandler Methods

<Anchor name="table-rows">

## Table rows

> **getRows()**: `Readable<any[]>`

````svelte
<script lang="ts">
    import { DataHandler } from '@vincjo/datatables'
    import { someData } from './my-data.json'

    const handler = new DataHandler(someData, { rowsPerPage: 50 })

    const rows = handler.getRows()
</script>

<ul>
    {#each $rows as row}
        <li>{row.first_name} {row.last_name}</li>
    {/each}
</ul>
````
</Anchor>



<Anchor name="sort-data">

## Sort data

> **sort(** *orderBy*: Function | string **)**: void <br>
> **sortAsc(** *orderBy*: Function | string **)**: void <br>
> **sortDesc(** *orderBy*: Function | string **)**: void <br>
> **getSorted()**: `Writable<{ identifier: string | null ; direction: 'asc' | 'desc' | null; }>`  <br>


````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const sorted = handler.getSorted()
</script>

<button type="button"
    on:click={() => handler.sort('email')}
    class:active={$sorted.identifier === 'email'}
    class:asc={$sorted.direction === 'asc'}
    class:desc={$sorted.direction === 'desc'}
>
    Sort by email
</button>

<button type="button"
    on:click={() => handler.sort( row => row.first_name + row.last_name)}
    class:active={$sorted.identifier === 'row => row.first_name + row.last_name'}
    class:asc={$sorted.direction === 'asc'}
    class:desc={$sorted.direction === 'desc'}
>
    Sort by first_name + last_name
</button>
````
</Anchor>



<Anchor name="filter-data">

## Filter data

> **filter(** *value*: string, *filterBy*: Function | string **)**: void

````svelte
<script lang="ts">
    import type DataHandler from '$lib/DataHandler'
    export let handler: DataHandler
    
    let value1 = ''
    let value2 = ''
</script>

<input type="text" 
    bind:value1 
    on:input={() => handler.filter(value1, 'email')}
/>

<input type="text" 
    bind:value2 
    on:input={() => handler.filter(value2, (row) => row.first_name + row.last_name)}
/>
````
</Anchor>



<Anchor name="search">

## Search

> **search(** *value*: string **)**: void <br>
> **clearSearch()**: void <br>


````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    let value = ''
</script>

<input type="text"
    bind:value={value} 
    on:input={() => handler.search(value)}
/>
<button type="button" on:click={() => handler.clearSearch()}>
    Clear
</button>
````
</Anchor>



<Anchor name="rows-per-page">

## Rows per page

> **getRowsPerPage()**: Writable`<number | null>`

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const rowsPerPage = handler.getRowsPerPage()
</script>

<p>Show {$rowsPerPage} entries</p>
````
</Anchor>



<Anchor name="row-count">

## Row count

> **getRowCount()**: Readable`<{ total: number; start: number; end: number; }>`

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const rowCount = handler.getRowCount()
</script>

<p>
    Showing <b>{$rowCount.start}</b> 
    to <b>{$rowCount.end}</b> 
    of <b>{$rowCount.total}</b> entries
</p>
````
</Anchor>



<Anchor name="pagination">

## Pagination

> **getPages(** *param*: `{ ellipsis: boolean }` **)**: Readable`<number[]>` <br>
> **getPageCount()**: Readable`<number>` <br>
> **getPageNumber()**: Readable`<number>` <br>
> **setPage(** *value*: number | 'previous' | 'next' **)**: void <br>


````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const pageNumber = handler.getPageNumber()
    const pageCount  = handler.getPageCount()
</script>

<button type="button" on:click={() => handler.setPage(1)}>
    First page
</button>

<button type="button" on:click={() => handler.setPage('previous')}>
    Previous
</button>

<p>Page {$pageNumber} / {$pageCount}</p>

<button on:click={() => handler.setPage('next')}>
    Next
</button>

<button on:click={() => handler.setPage($pageCount)}>
    Last page
</button>
````
</Anchor>



<Anchor name="detect-a-change">

## Detect a change

> **getTriggerChange()**: Writable`<number>`

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    let element: HTMLElement | undefined

    const triggerChange = handler.getTriggerChange()
    $: $triggerChange, scrollTop()

    const scrollTop = () => {
        if (element) element.scrollTop = 0
    }
</script>

<ul bind:this={element}>

</ul>
````
</Anchor>



<Anchor name="update-dataset">

## Update dataset

> **update(** *data*: any[] **)**: void

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    import { newDataset } from './my-data.json'

    export let handler: DataHandler

    handler.update(newDataset)
</script>
````
</Anchor>

<br><br><br><br>
<br><br><br><br>
<br><br><br><br>
<br><br><br><br>
<br><br><br><br>
<br><br><br><br>



<style>
    .flex{display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:wrap;}
    h1{font-size:32px;color:var(--primary);font-family:Arial, Helvetica;font-weight:normal;}
    h2{font-size:48px;color:var(--active-dark);font-weight:400;margin:80px 0 8px 0;}
    a.anchor{display:block;margin-top:80px;}
    p{margin-right:24px;}

    pre.language-typescript{display:inline;padding:4px 16px;}

    blockquote{display:inline-block;margin:0;background:#eee;border-radius:8px;padding:4px 8px;}
    blockquote p{padding:0;margin:0;color:#ad1457;font-family:monospace;}
    blockquote strong{color:#00695c;font-family:JetBrains}
    blockquote em{color:#ef6c00;font-style:normal;font-family:Helvetica;}
</style>