export default class RangeHandler {
    min: number;
    max: number;
    initialValue: number;
    value: number;
    element: HTMLElement;
    container: HTMLElement;
    thumb: HTMLElement;
    progressBar: HTMLElement;
    elementX: any;
    currentThumb: any;
    holding: boolean;
    thumbHover: boolean;
    keydownAcceleration: number;
    accelerationTimer: any;
    mouseEventShield: HTMLDivElement;
    onchange: (event?: Event) => void;
    constructor(value?: number, min?: number, max?: number, onchange?: () => void);
    setup(element: HTMLElement, container: HTMLElement, thumb: HTMLElement, progressBar: HTMLElement): void;
    resizeWindow(): void;
    setValue(value: number): void;
    onTrackEvent(event: any): void;
    onHover(event: any): void;
    onDragStart(event: Event): void;
    onDragEnd(event: MouseEvent | TouchEvent): void;
    isMouseInElement(event: MouseEvent, element: HTMLElement): boolean;
    onKeyPress(event: KeyboardEvent): void;
    calculateNewValue(clientX: number): void;
    updateValueOnEvent(event: any): boolean;
}
