type Props = {
    values: number[];
    min?: number;
    max?: number;
    step?: number;
    pips?: boolean;
    range: boolean | 'min' | 'max';
    pushy: boolean;
};
export default class SliderHandler {
    slider: HTMLElement;
    big: boolean;
    range: 'min' | 'max' | boolean;
    pushy: boolean;
    min: number;
    max: number;
    step: number;
    values: number[];
    vertical: boolean;
    float: boolean;
    reversed: boolean;
    hoverable: boolean;
    disabled: boolean;
    pips: boolean;
    pipstep: any;
    all: any;
    first: any;
    last: any;
    rest: any;
    formatter: (v: any, i: any, p: any) => any;
    handleFormatter: (v: any, i: any, p: any) => any;
    precision: number;
    springValues: {
        stiffness: number;
        damping: number;
    };
    valueLength: number;
    focus: boolean;
    handleActivated: boolean;
    handlePressed: boolean;
    keyboardActive: boolean;
    activeHandle: number;
    startValue: any;
    previousValue: any;
    springPositions: any;
    constructor({ values, min, max, step, pips, range, pushy }: Props);
    index(el: Element): number;
    normalisedClient(e: any): any;
    targetIsHandle(el: Element): any;
    trimRange(values: number[]): number[];
    getSliderDimensions(): DOMRect;
    getClosestHandle(clientPos: any): any;
    handleInteract(clientPos: any): void;
    moveHandle(index: any, value: any): any;
    rangeStart(values: any): any;
    rangeEnd(values: any): number;
    sliderBlurHandle(e: any): void;
    sliderFocusHandle(e: any): void;
    sliderKeydown(e: any): void;
    sliderInteractStart(e: any): void;
    sliderInteractEnd(e: any): void;
    bodyInteractStart(e: any): void;
    bodyInteract(e: any): void;
    bodyMouseUp(e: any): void;
    bodyTouchEnd(e: any): void;
    bodyKeyDown(e: any): void;
    eStart(): void;
    eStop(): void;
    eChange(): void;
    percentOf(val: any): number;
    fixFloat(v: any): number;
    clampValue(val: any): any;
    alignValueToStep(val: any): number;
}
export {};
